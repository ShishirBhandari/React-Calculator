{"version":3,"sources":["components/Display/Display.module.css","components/Keypad/Keypad.module.css","components/Key/Key.module.css","components/Display/Display.js","components/Key/Key.js","components/Keypad/Keypad.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","display","props","className","classes","output","key","Key","onClick","clicked","children","keypad","Keypad","map","button","index","keyPressed","App","state","expression","event","character","target","innerHTML","validateExpression","char","setState","solveExpression","length","setExpression","exp","result","evaluateExpression","console","log","isOperator","valStack","opStack","precedence","operator","calculate","a","b","i","push","pop","tempRes","isNaN","val","split","Number","Display","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d454610.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2n21m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Keypad\":\"Keypad_Keypad__Nzuw3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Key\":\"Key_Key__h7dn3\"};","import React from 'react';\n\nimport classes from './Display.module.css';\n\nconst display = (props) => {\n  return (\n    <div className={classes.display}>\n      <p>{props.output === '' ? '0' : props.output}</p>\n    </div>\n  );\n}\n\nexport default display;","import React from 'react';\n\nimport classes from './Key.module.css'\n\nconst key = (props) => {\n    return (\n        <div className={classes.Key} onClick={props.clicked}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default key;","import React from 'react';\n\nimport classes from './Keypad.module.css'\n\nimport Key from './../Key/Key';\n\nconst keypad = (props) => {\n\n    const buttons = [\n        '(', ')', '%', 'AC',\n        '7', '8', '9', '/',\n        '4', '5', '6', '*',\n        '1', '2', '3', '-',\n        '.', '0', '=', '+',\n    ];\n\n    // const buttonClicked = () => {\n\n    // }\n\n    return (\n        <div className={classes.Keypad}>\n            {buttons.map((button, index) => {\n                return <Key clicked={props.keyPressed} key={index}>{button}</Key>\n            })\n            }\n\n        </div>\n    );\n}\n\nexport default keypad;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Display from './../../components/Display/Display';\nimport Keypad from './../../components/Keypad/Keypad';\n\nclass App extends Component {\n\n  state = {\n    expression: ''\n  }\n\n  keyPressed = (event) => {\n    var character = event.target.innerHTML;\n\n    this.validateExpression(character);\n  }\n\n  validateExpression = (char) => {\n    switch (char) {\n      case 'AC':\n        // var poppedExpression = this.state.expression.slice(0, this.state.expression.length - 1);\n        var poppedExpression = '';\n        this.setState({\n          expression: poppedExpression\n        })\n        break;\n      case '=':\n        this.solveExpression();\n        break;\n      case '.':\n        if (this.state.expression[this.state.expression.length - 1] === '.')\n          return;\n        else\n          this.setExpression(this.state.expression + char);\n        break;\n      default:\n        this.setExpression(this.state.expression + char);\n        break;\n    }\n  }\n\n  setExpression = (exp) => {\n    this.setState({\n      expression: exp\n    });\n  }\n\n  solveExpression = () => {\n    var expression = this.state.expression;\n    var result = this.evaluateExpression(expression);\n    // var postFix = this.infixToPostfix(expression);\n    // this.solvePostfix(postFix);\n    this.setExpression(result + '');\n    console.log(result);\n    return;\n  }\n\n  isOperator = (char) => {\n    if (char === '/' ||\n      char === '*' ||\n      char === '+' ||\n      char === '-' ||\n      char === '%'\n    ) {\n      return true;\n    }\n    else return false;\n  }\n\n  evaluateExpression = (expression) => {\n    var valStack = [];\n    var opStack = [];\n\n    const precedence = (operator) => {\n      switch (operator) {\n        case '+':\n        case '-':\n          return 1;\n        case '/':\n        case '*':\n          return 2;\n        case '%':\n          return 3;\n        default:\n          return 0;\n      }\n    }\n\n    const calculate = (operator, a, b) => {\n      switch (operator) {\n        case '/':\n          return b === 0 ? 'NaN' : a / b;\n        case '*':\n          return a * b;\n        case '+':\n          return a + b;\n        case '-':\n          return a - b;\n        case '%':\n          return a % b;\n        default:\n          return 0;\n      }\n    }\n\n    let i = 0;\n    while (i < expression.length) {\n      const char = expression[i];\n      console.log(char);\n\n      if (char === '(') {\n        opStack.push(char);\n      }\n      else if (char === ')') {\n        while (opStack.length > 0 && opStack[opStack.length - 1] !== '(') {\n          //from here\n          let operator = opStack.pop();\n          let b = valStack.pop();\n          let a = valStack.pop();\n          let tempRes = calculate(operator, a, b);\n          valStack.push(tempRes);\n        }\n        if (opStack.length > 0)\n          opStack.pop();\n      }\n      else if (this.isOperator(char)) {\n        console.log(char);\n        while (opStack.length > 0 && precedence(char) < precedence(opStack[opStack.length - 1])) {\n          let operator = opStack.pop();\n          let b = valStack.pop();\n          let a = valStack.pop();\n          let tempRes = calculate(operator, a, b);\n          valStack.push(tempRes);\n        }\n        opStack.push(char);\n      }\n      else if (!isNaN(char)) {\n        let val = '';\n        while (i < expression.length && (!isNaN(expression[i]) || expression[i] === '.')) {\n          val += expression[i];\n          i++;\n        }\n        if (val.split('.').length - 1 > 1) {\n          return 'INVALID INPUT'\n        }\n        valStack.push(Number(val));\n        i--;\n      }\n\n      i++;\n    }\n\n    while (opStack.length > 0) {\n      let operator = opStack.pop();\n      let b = valStack.pop();\n      let a = valStack.pop();\n      let tempRes = calculate(operator, a, b);\n      valStack.push(tempRes);\n    }\n\n    return valStack[0];\n  }\n\n  // infixToPostfix = (expression) => {\n  //   var stack = [];\n  //   var postfix = '';\n\n  //   const precedence = (operator) => {\n  //     switch (operator) {\n  //       case '+':\n  //       case '-':\n  //         return 1;\n  //         break;\n  //       case '/':\n  //       case '*':\n  //         return 2;\n  //         break;\n  //       case '%':\n  //         return 3;\n  //         break;\n  //       default:\n  //         return 0;\n  //         break;\n  //     }\n  //   }\n\n\n\n  //   for (let i = 0; i < expression.length; i++) {\n  //     const char = expression[i];\n\n  //     if (char === '(') {\n  //       stack.push(char);\n  //     }\n  //     else if (char === ')') {\n  //       while (stack.length > 0 && stack[stack.length - 1] !== '(') {\n  //         postfix += stack.pop();\n  //       }\n  //       if (stack.length > 0)\n  //         stack.pop();\n  //     }\n  //     else if (this.isOperator(char)) {\n  //       // if (stack.length > 0 && precedence(char) < precedence(stack[stack.length - 1])) {\n\n  //       // }\n  //       while (stack.length > 0 && precedence(char) < precedence(stack[stack.length - 1])) {\n  //         postfix += stack.pop();\n  //       }\n  //       stack.push(char);\n  //     }\n  //     else {\n  //       postfix += char;\n  //     }\n  //   }\n\n  //   while (stack.length > 0) {\n  //     postfix += stack.pop();\n  //   }\n\n  //   return postfix;\n  // }\n\n  // solvePostfix = (postfix) => {\n  //   var result = '';\n  //   var stack = [];\n\n  //   const calculate = (operator, a, b) => {\n  //     switch (operator) {\n  //       case '/':\n  //         return b === 0 ? 'NaN' : a / b;\n  //         break;\n  //       case '*':\n  //         return a * b;\n  //       case '+':\n  //         return a + b;\n  //       case '-':\n  //         return a - b;\n  //       case '%':\n  //         return a % b;\n  //     }\n  //   }\n\n  //   for (let i = 0; i < postfix.length; i++) {\n  //     const char = postfix[i];\n\n  //     if (this.isOperator(char)) {\n  //       const a = stack.pop();\n  //       const b = stack.pop();\n\n  //       var tempRes = calculate(char, b, a);\n  //       stack.push(tempRes);\n  //     }\n  //     else {\n  //       stack.push(Number(char));\n  //     }\n  //   }\n\n  //   result = stack.pop();\n\n  //   this.setExpression(result + '');\n  // }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <h2>React Calculator</h2>\n        <Display output={this.state.expression}></Display>\n        <Keypad keyPressed={this.keyPressed}></Keypad>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\nserviceWorker.unregister();\n"],"sourceRoot":""}